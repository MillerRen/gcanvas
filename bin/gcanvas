#!/usr/bin/env node

var fs = require('fs')
  , program = require('commander')
  , path = require('path')
  , basename = path.basename
  , dirname = path.dirname
  , resolve = path.resolve
  , exists = fs.existsSync || path.existsSync
  , GCanvas = require('../');

program
  .version(require('../package.json').version)
  .usage('[options] <file ...>')
  .option('-s, --speed <number>', 'spindle speed', Number)
  .option('-f, --feed <number>', 'feed rate', Number)
  .option('-d, --depth <number>', 'z of final cut depth', Number)
  .option('-c, --depthofcut <number>', 'z offset of layered cuts', Number)
  .option('-t, --top <number>', 'z of top of work surface', Number)
  .option('-D, --tooldiameter <number>', 'diameter of tool', Number)
  .option('-w, --width <number>', 'canvas width', Number)
  .option('-h, --height <number>', 'canvas height', Number)
  .option('-e, --entry <name>', 'name of entry function to call. defaults to main(ctx)', 'main')
  .option('--step <number>', 'skip to step n', Number)
  .option('--only <number>', 'run step n and stop', Number)
  .option('--test', 'run simulation in a browser')

program.parse(process.argv);

if(program.test) {
  program.args.forEach(function(file) {
    var path = require('path');
    var exec = require('child_process').exec;

    var url = 'file://localhost'+ __dirname + '/simulator/simulator.html?file://localhost' + path.resolve(file);
    var cmd = __dirname + '/osxopenhack '+url;
    console.log(cmd);
    exec(cmd);
  });
}
else {

  var gctx = new GCanvas();

  if(program.speed) gctx.speed = program.speed;
  if(program.feed) gctx.feed = program.feed;
  if(program.depth) gctx.depth = program.depth;
  if(program.depthofcut) gctx.depthOfCut = program.depthofcut;
  if(program.top) gctx.top = program.top;
  if(program.width) gctx.canvas.width = program.width;
  if(program.height) gctx.canvas.height = program.height;
  if(program.tooldiameter) gctx.toolDiameter = program.tooldiameter;

  var setupNum = 0;
  var setupOffset = program.only || program.step || 0;
  var queue = [];
  var finished = false;

  function setup(desc, fn) {
    if(finished) return;

    setupNum++;

    if(arguments.length === 1) {
      fn = desc;
      desc = setupNum;
    }

    if(setupNum == program.only) {
      gctx.save();
      fn(gctx);
      gctx.restore();
    }

    if(!program.only && setupNum >= setupOffset) {
       queue.push({desc: desc, fn: fn});
    }
  }

  function processQueue() {
    if(queue.length === 0) return;
    var readline = require('readline'),
        rl = readline.createInterface(process.stdin, process.stderr);
    var currentStep;

    function next() {
      currentStep = queue.shift();
      if(!currentStep) {
        rl.close();
        return;
      }

      gctx.motion.rapid({z:0});
      rl.setPrompt('(setup '+currentStep.desc+')');
      rl.prompt();
    }

    rl.on('line', function() {
      gctx.save();
      currentStep.fn(gctx);
      gctx.restore();
      next();
    }).on('close', function() {
      process.exit(0);
    });

    next();
  }

  function run(file) {
    var util = require('util'),
        vm = require('vm'),
        sandbox = {setup: setup, step: setup};

    var code = fs.readFileSync(file);
    var script = vm.createScript(code, file);
    script.runInNewContext(sandbox);

    if(sandbox[program.entry]) {
      sandbox[program.entry](gctx);
    }

    processQueue();
  };

  if(program.args.length === 0) {
    program.outputHelp();
  }

  program.args.forEach(function(file) {
    run(file);
  });

  // ctx.driver.send('M30');
  // cleanup
  // gctx.motion.rapid({x:0,y:0,z:0});
}
