#!/usr/bin/env node

var fs = require('fs')
  , program = require('commander')
  , path = require('path')
  , basename = path.basename
  , dirname = path.dirname
  , resolve = path.resolve
  , exists = fs.existsSync || path.existsSync
  , GCanvas = require('../');

program
  .version(require('../package.json').version)
  .usage('[options] <file ...>')
  .option('-s, --speed <number>', 'Spindle speed')
  .option('-f, --feed <number>', 'Feed rate')
  .option('-d, --depth <number>', 'Final cut depth')
  .option('-c, --depthofcut <number>', 'Depth of layered cut')
  .option('-s, --surface <number>', 'Distance to work surface')
  .option('-e, --entry <name>', 'Name of entry function to call. Defaults to main(ctx)', 'main')

program.parse(process.argv);

var gctx = new GCanvas();

if(program.speed) gctx.speed = program.speed;
if(program.feed) gctx.feed = program.feed;
if(program.depth) gctx.depth = program.depth;
if(program.depthofcut) gctx.depthOfCut = program.depthofcut;
if(program.surface) gctx.surface = program.surface;

function run(file) {
  var util = require('util'),
      vm = require('vm'),
      sandbox = {};

  var code = fs.readFileSync(file);
  var script = vm.createScript(code, file);
  script.runInNewContext(sandbox);

  if(!sandbox[program.entry]) {
    console.error('No '+program.entry+'() function found. Define it or use -m to specify another entry point.');
    process.exit();
  }

  sandbox[program.entry](gctx);
};

if(program.args.length === 0) {
  program.outputHelp();
}

program.args.forEach(function(file) {
  run(file);
});

// cleanup
gctx.motion.retract();
gctx.motion.rapid({x:0,y:0,z:0});
